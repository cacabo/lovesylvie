if (self.CavalryLogger) { CavalryLogger.start_js(["kHqgh"]); }

__d("ServiceWorkerRegistration",["Promise","ClientServiceWorkerMessage","EventListener"],(function a(b,c,d,e,f,g){var h="serviceWorker"in navigator;function i(){var k=navigator.serviceWorker;if(!h||!k)throw new Error("serviceWorker is not supported in this browser");return k}var j={isSupported:function k(){return h},registerWorkerIfUnregistered:function k(l){var m=i();return new(c("Promise"))(function(n,o){this.getWorkerRegistration(l).done(function(p){if(!p){var q=c("EventListener").listen(window,"message",function(event){if(event.data&&event.data.command&&event.data.command==="ServiceWorkerInstallError")o()});c("Promise").resolve(m.register(l,{updateViaCache:"all"})).done(function(){q.remove();c("Promise").resolve(m.ready).done(n)})}else n(p)})}.bind(this))},unregisterControllingWorker:function k(){return new(c("Promise"))(function(l,m){var n=new(c("ClientServiceWorkerMessage"))("unregister",{},function(){l(true)});n.sendViaController()})},getWorkerRegistration:function k(l){var m=i();return c("Promise").resolve(m.getRegistration(l))},isAWorkerActivated:function k(){if(!navigator.serviceWorker||!navigator.serviceWorker.getRegistration)return c("Promise").resolve(false);return navigator.serviceWorker.getRegistration().then(function(l){return!!(l&&l.active)})}};f.exports=j}),null);